// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const copyFile = (src, dest) => {
  const readStream = fs.createReadStream(src);
  const writeStream = fs.createWriteStream(dest);
  const totalSize = fs.statSync(src).size;
  let progress = 0;

  readStream.on('data', (chunk) => {
    progress += chunk.length;
    console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round((progress / totalSize) * 100)}%`);
    writeStream.write(chunk);
  });

  readStream.on('end', () => {
    writeStream.end();
    console.log('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const encodeFile = (src, encodingTablePath) => {
  const encodingTable = fs.readFileSync(encodingTablePath, 'utf-8').split('\n').reduce((acc, line) => {
    const [sym, replacer] = line.split(':');
    acc[sym] = replacer;
    return acc;
  }, {});

  const data = fs.readFileSync(src, 'utf-8');
  const encodedData = data.split('').map(char => encodingTable[char] || char).join('');
  
  fs.writeFileSync(src, encodedData);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const decodeFile = (src, encodingTablePath) => {
  const encodingTable = fs.readFileSync(encodingTablePath, 'utf-8').split('\n').reduce((acc, line) => {
    const [sym, replacer] = line.split(':');
    acc[replacer] = sym;
    return acc;
  }, {});

  const data = fs.readFileSync(src, 'utf-8');
  const decodedData = data.split('').map(char => encodingTable[char] || char).join('');
  
  fs.writeFileSync(src, decodedData);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
const printProgress = () => {
  readline.clearLine(process.stdout, 0);
  readline.cursorTo(process.stdout, 0);
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ 4 –∫—É—Å–æ—á–∫–∞ –ø–∏—Ü—Ü—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
  const pizza = 'üçï'.repeat(progress % 5);
  
  process.stdout.write(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% ${pizza}`);
  
  if (progress >= 100) {
    console.log('\n–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!');
    clearInterval(interval);
    return;
  }
  
  progress += Math.floor(Math.random() * (10 - 1 + 1)) + 1;
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
switch (process.argv[2]) {
case 'copy':
  copyFile(path.resolve(process.argv[3]), path.resolve(process.argv[4]));
  break;
case 'encode':
  encodeFile(path.resolve(process.argv[3]), path.resolve(process.argv[4]));
  break;
case 'decode':
  decodeFile(path.resolve(process.argv[3]), path.resolve(process.argv[4]));
  break;
default:
  console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
let progress = 0;
const interval = setInterval(printProgress, 500);
